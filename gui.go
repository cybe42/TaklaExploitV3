package main

import (
	"os"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

func inject() {
	WRD.Inject()
}

func execute(code string, setmsg func(string)) {
	WRD.SendLua(code)
	setmsg("executed")
}

func loadfile(filepath string, setmsg func(string)) {
	file, err := os.ReadFile(filepath)
	if err != nil {
		setmsg(err.Error())
		return
	}
	WRD.SendLua(string(file))
	setmsg("loaded")
}

func isAPIAttached() bool {
	return WRD.IsAPIAttached()
}

func gui() {
	a := app.New()
	a.Settings().SetTheme(theme.DarkTheme())
	w := a.NewWindow("TaklaExploit v3 - cybe#4342, chi#1337")
	w.Resize(fyne.NewSize(600, 350))
	layout.NewHBoxLayout()
	editor := widget.NewMultiLineEntry()
	editor.SetPlaceHolder("# Write your lua code here...\nprint(\"amogus\")")
	msg := widget.NewLabel("msg:\n none.")
	setmsg := func(txt string) { msg.SetText("msg:\n " + txt) }
	execws := func(e string) {
		execute(e, setmsg)
	}
	exec := func() {
		execws(editor.Text)
	}

	editor.OnSubmitted = func(s string) {
		execws(s)
	}

	injlabel := widget.NewLabel("not-injected")
	setinjlabel := func(s string) {
		injlabel.SetText(s)
	}
	go func() {
		for {
			inj := isAPIAttached()
			var injmsg string = injlabel.Text
			if inj {
				injmsg = "injected"
			} else {
				if injmsg != "injecting..." {
					injmsg = "not-injected"
				}
			}
			setinjlabel(injmsg)
			time.Sleep(500 * time.Millisecond)
		}
	}()
	inject := widget.NewButton("inject", func() { setinjlabel("injecting..."); inject() })
	execute := widget.NewButton("execute", exec)
	load := widget.NewEntry()
	load.OnSubmitted = func(s string) {
		loadfile(s, setmsg)
	}
	load.SetPlaceHolder("Script path")
	loadbutton := widget.NewButton("load script", func() { loadfile(load.Text, setmsg) })
	utilsbox := container.NewBorder(container.NewVBox(inject, execute, injlabel, msg), container.NewVBox(load, loadbutton), nil, nil)
	/*hsplit := container.NewHSplit(
		editor,
		buttonsbox,
	)*/
	hsplit := container.NewHSplit(editor, utilsbox)
	hsplit.SetOffset(0.80)
	w.SetContent(hsplit) // widget.NewLabel("Hello World!")
	w.ShowAndRun()
}
