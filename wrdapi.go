package main

// written by cybe42

import (
	_ "embed"
	"os"
	"syscall"
	"unsafe"
)

type WrdAPI struct {
	wrd           *syscall.LazyDLL
	inject        *syscall.LazyProc
	sendLua       *syscall.LazyProc
	isAPIAttached *syscall.LazyProc
}

const wrdlDLLname string = "wrd-api.dll"

var wrdDLLpath string = os.TempDir() + string(os.PathSeparator) + wrdlDLLname

//go:embed wrd-api.dll
var wrdDLL []byte

func init() {
	if _, err := os.Open(wrdDLLpath); os.IsNotExist(err) {
		file, err := os.Create(wrdDLLpath)
		if err != nil {
			panic(err)
		}
		file.Write(wrdDLL)
	}
}

func NewWrdAPI() *WrdAPI {
	wrd := syscall.NewLazyDLL(wrdDLLpath)
	inject := wrd.NewProc("LaunchExploit")
	sendLua := wrd.NewProc("SendLuaScript")
	isAPIAttached := wrd.NewProc("isAPIAttached")
	tempWrdAPI := &WrdAPI{wrd, inject, sendLua, isAPIAttached}
	return tempWrdAPI
}

func stringToCharPtr(str string) *uint8 {
	chars := append([]byte(str), 0) // null terminated
	return &chars[0]
}

func (w *WrdAPI) Inject() {
	w.inject.Call()
}

func (w *WrdAPI) IsAPIAttached() bool {
	iaa, _, _ := w.isAPIAttached.Call()
	return iaa != 0
}

func (w *WrdAPI) SendLua(lua string) {
	w.sendLua.Call(uintptr(unsafe.Pointer(stringToCharPtr(lua))))
}
